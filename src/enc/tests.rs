use super::*;

#[test]
fn full() {
    let buf = [u8::MAX; 128 * 64];
    let mut out = Vec::with_capacity(1);

    let mut tree = LinearQuadTree::new(&mut out);
    tree.parse_slice_12864(&buf).unwrap();

    assert_eq!(out, [0])
}

#[test]
fn empty() {
    let buf = [0; 128 * 64];
    let mut out = Vec::new();

    let mut tree = LinearQuadTree::new(&mut out);
    tree.parse_slice_12864(&buf).unwrap();

    assert_eq!(out, [1])
}

#[test]
fn stairs() {
    let m = u8::MAX;
    #[rustfmt::skip]
    let buf = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0f,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0f,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0f,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0f,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0b0000_0011,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0b0000_0011,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0b0000_0001,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];

    #[rustfmt::skip]
    let expected: &[u8] = &[
        1,
        0b1_010_01_01,
        0b1_011_01_11, 0b01_00_00_00,
        0b1_100_01_11, 0b11_01_00_00,
        0b1_101_01_11, 0b11_11_01_00,
        0b1_110_01_11, 0b11_11_11_01,
        0b00_01_11_11, 0b11_11_11_01,
    ];

    let mut out = Vec::with_capacity(expected.len());

    let mut tree = LinearQuadTree::new(&mut out);
    tree.parse_slice_12864(&buf).unwrap();

    assert_eq!(expected, out.as_slice())
}
