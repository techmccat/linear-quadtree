use embedded_graphics::{mock_display, prelude::ImageDrawable};

use super::LeafParser;

#[test]
fn full() {
    let leaf = [0b1_001_00_00];
    let mut display = mock_display::MockDisplay::new();

    LeafParser::new(&leaf).draw(&mut display).unwrap();

    let pattern = ["################################################################"; 64];
    display.assert_pattern(&pattern)
}

#[test]
fn stairs() {
    let leaves = [
        0b1_010_00_11,
        0b1_011_00_10, 0b11_00_00_00,
        0b1_100_00_10, 0b10_11_00_00,
        0b1_101_00_10, 0b10_10_11_00,
        0b1_110_00_10, 0b10_10_10_11,
        0b01_00_10_10, 0b10_10_10_11,
    ];
    let mut display = mock_display::MockDisplay::new();

    LeafParser::new(&leaves).draw(&mut display).unwrap();

    let pattern = [
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "        ########################################################",
        "        ########################################################",
        "        ########################################################",
        "        ########################################################",
        "    ############################################################",
        "    ############################################################",
        "  ##############################################################",
        " ###############################################################",
    ];
    display.assert_pattern(&pattern)
}
