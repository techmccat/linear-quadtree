use super::{Decoder, LeafParserV1, LeafParserV2};
use crate::{dec::Leaf, LeafData};

use embedded_graphics::{mock_display, prelude::ImageDrawable, Drawable};
use heapless::Vec;

#[test]
fn parse() {
    let leaves = [
        1,
        0b1_010_01_01,
        0b1_011_01_11,
        0b01_00_00_00,
        0b1_100_01_11,
        0b11_01_00_00,
        0b1_101_01_11,
        0b11_11_01_00,
        0b1_110_01_11,
        0b11_11_11_00,
        0xf0,
        0x0f,
    ];

    let expect = [
        Leaf {
            pos: Vec::from_slice(&[1, 1]).unwrap(),
            data: LeafData::Feature(true),
        },
        Leaf {
            pos: Vec::from_slice(&[1, 3, 1]).unwrap(),
            data: LeafData::Feature(true),
        },
        Leaf {
            pos: Vec::from_slice(&[1, 3, 3, 1]).unwrap(),
            data: LeafData::Feature(true),
        },
        Leaf {
            pos: Vec::from_slice(&[1, 3, 3, 3, 1]).unwrap(),
            data: LeafData::Feature(true),
        },
        Leaf {
            pos: Vec::from_slice(&[1, 3, 3, 3, 3]).unwrap(),
            data: LeafData::Bitmap([0xf0, 0x0f]),
        },
    ];

    let parser = LeafParserV1::new(&leaves).unwrap();
    let iter = parser.iter().zip(expect);

    for (p, e) in iter {
        assert_eq!(p, e)
    }
}

#[test]
fn draw_full() {
    let leaf = Leaf {
        pos: Vec::from_slice(&[0]).unwrap(),
        data: LeafData::Feature(true),
    };
    let mut display = mock_display::MockDisplay::new();

    leaf.draw(&mut display).unwrap();

    let pattern = ["################################################################"; 64];
    display.assert_pattern(&pattern)
}

#[test]
fn draw_stairs() {
    const STAIR_PATTERN: [&str; 64] = [
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "        ########################################################",
        "        ########################################################",
        "        ########################################################",
        "        ########################################################",
        "....############################################################",
        "....############################################################",
        "..##############################################################",
        ".###############################################################",
    ];

    let leaves = [
        Leaf {
            pos: Vec::from_slice(&[0, 3]).unwrap(),
            data: LeafData::Feature(true),
        },
        Leaf {
            pos: Vec::from_slice(&[0, 2, 3]).unwrap(),
            data: LeafData::Feature(true),
        },
        Leaf {
            pos: Vec::from_slice(&[0, 2, 2, 3]).unwrap(),
            data: LeafData::Feature(true),
        },
        Leaf {
            pos: Vec::from_slice(&[0, 2, 2, 2, 3]).unwrap(),
            data: LeafData::Feature(true),
        },
        Leaf {
            pos: Vec::from_slice(&[0, 2, 2, 2, 2]).unwrap(),
            data: LeafData::Bitmap([0, 0b0011_0111]),
        },
    ];

    let mut display = mock_display::MockDisplay::new();

    for leaf in leaves {
        leaf.draw(&mut display).unwrap();
    }

    display.assert_pattern(&STAIR_PATTERN)
}

#[test]
fn parse_draw_full() {
    let leaf = [0];
    let mut display = mock_display::MockDisplay::new();

    LeafParserV1::new(&leaf)
        .unwrap()
        .drawable()
        .draw(&mut display)
        .unwrap();

    let pattern = ["################################################################"; 64];
    display.assert_pattern(&pattern)
}

const STAIR_PATTERN_BUF_CLEARED: [&str; 64] = [
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................................................",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................................################################",
    "................################################################",
    "................################################################",
    "................################################################",
    "................################################################",
    "................################################################",
    "................################################################",
    "................################################################",
    "................################################################",
    "........########################################################",
    "........########################################################",
    "........########################################################",
    "........########################################################",
    "....############################################################",
    "....############################################################",
    "..##############################################################",
    ".###############################################################",
];
#[test]
fn parse_draw_stairs_v1() {
    let leaves = [
        1,
        0b1_010_00_11,
        0b1_011_00_10,
        0b11_00_00_00,
        0b1_100_00_10,
        0b10_11_00_00,
        0b1_101_00_10,
        0b10_10_11_00,
        0b1_110_00_10,
        0b10_10_10_00,
        0,
        0b0011_0111,
    ];
    let mut display = mock_display::MockDisplay::new();
    display.set_allow_overdraw(true);

    LeafParserV1::from_buf(&leaves)
        .unwrap()
        .drawable()
        .draw(&mut display)
        .unwrap();
    display.assert_pattern(&STAIR_PATTERN_BUF_CLEARED)
}

#[test]
fn parse_draw_stairs_v2() {
    let leaves = [
        0b01_01_10_10,
        0b01_10_10_01,
        0b10_10_01_10,
        0b10_01_10_10,
        0b01_10_10_10,
        0b11_11_11_11,
        0b11_11_00_00,
        0b00
    ];

    let mut display = mock_display::MockDisplay::new();
    display.set_allow_overdraw(true);

    LeafParserV2::from_buf(&leaves)
        .unwrap()
        .drawable()
        .draw(&mut display)
        .unwrap();
    display.assert_pattern(&STAIR_PATTERN_BUF_CLEARED)
}
