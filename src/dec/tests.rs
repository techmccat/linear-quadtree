use embedded_graphics::{Drawable, mock_display, prelude::ImageDrawable};

use crate::dec::ParsedLeaf;

use super::LeafParser;

#[test]
fn parse() {
    let leaves = [
        0b1_010_00_11,
        0b1_011_00_10, 0b11_00_00_00,
        0b1_100_00_10, 0b10_11_00_00,
        0b1_101_00_10, 0b10_10_11_00,
        0b1_110_00_10, 0b10_10_10_11,
        0b00_00_10_10, 0b10_10_10_11,
    ];

    let expect = [
        ParsedLeaf {
            depth: 2,
            pos: [0, 3, 0, 0, 0, 0, 0],
            feature: true,
        },
        ParsedLeaf {
            depth: 3,
            pos: [0, 2, 3, 0, 0, 0, 0],
            feature: true,
        },
        ParsedLeaf {
            depth: 4,
            pos: [0, 2, 2, 3, 0, 0, 0],
            feature: true,
        },
        ParsedLeaf {
            depth: 5,
            pos: [0, 2, 2, 2, 3, 0, 0],
            feature: true,
        },
        ParsedLeaf {
            depth: 6,
            pos: [0, 2, 2, 2, 2, 3, 0],
            feature: true,
        },
        ParsedLeaf {
            depth: 7,
            pos: [0, 2, 2, 2, 2, 2, 3],
            feature: true,
        },
    ];

    let parser = LeafParser::new(&leaves);
    let iter = parser.into_iter().zip(expect);

    for (p, e) in iter {
        assert_eq!(p, e)
    }
}

#[test]
fn draw_full() {
    let leaf = ParsedLeaf {
        depth: 1,
        pos: [0; 7],
        feature: true
    };
    let mut display = mock_display::MockDisplay::new();

    leaf.draw(&mut display).unwrap();

    let pattern = ["################################################################"; 64];
    display.assert_pattern(&pattern)
}

#[test]
fn draw_stairs() {
    let leaves = [
        ParsedLeaf {
            depth: 2,
            pos: [0, 3, 0, 0, 0, 0, 0],
            feature: true,
        },
        ParsedLeaf {
            depth: 3,
            pos: [0, 2, 3, 0, 0, 0, 0],
            feature: true,
        },
        ParsedLeaf {
            depth: 4,
            pos: [0, 2, 2, 3, 0, 0, 0],
            feature: true,
        },
        ParsedLeaf {
            depth: 5,
            pos: [0, 2, 2, 2, 3, 0, 0],
            feature: true,
        },
        ParsedLeaf {
            depth: 6,
            pos: [0, 2, 2, 2, 2, 3, 0],
            feature: true,
        },
        ParsedLeaf {
            depth: 7,
            pos: [0, 2, 2, 2, 2, 2, 3],
            feature: true,
        },
    ];

    let mut display = mock_display::MockDisplay::new();

    for leaf in leaves {
        leaf.draw(&mut display).unwrap();
    }

    let pattern = [
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "        ########################################################",
        "        ########################################################",
        "        ########################################################",
        "        ########################################################",
        "    ############################################################",
        "    ############################################################",
        "  ##############################################################",
        " ###############################################################",
    ];
 
    display.assert_pattern(&pattern)
}

#[test]
fn parse_draw_full() {
    let leaf = [0b1_001_00_00];
    let mut display = mock_display::MockDisplay::new();

    LeafParser::new(&leaf).draw(&mut display).unwrap();

    let pattern = ["################################################################"; 64];
    display.assert_pattern(&pattern)
}

#[test]
fn parse_draw_stairs() {
    let leaves = [
        0b1_010_00_11,
        0b1_011_00_10, 0b11_00_00_00,
        0b1_100_00_10, 0b10_11_00_00,
        0b1_101_00_10, 0b10_10_11_00,
        0b1_110_00_10, 0b10_10_10_11,
        0b01_00_10_10, 0b10_10_10_11,
    ];
    let mut display = mock_display::MockDisplay::new();

    LeafParser::new(&leaves).draw(&mut display).unwrap();

    let pattern = [
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "        ########################################################",
        "        ########################################################",
        "        ########################################################",
        "        ########################################################",
        "    ############################################################",
        "    ############################################################",
        "  ##############################################################",
        " ###############################################################",
    ];
    display.assert_pattern(&pattern)
}
