use crate::dec::Leaf;
use super::LeafParser;

use heapless::Vec;
use embedded_graphics::{mock_display, prelude::ImageDrawable, Drawable};

#[test]
fn parse() {
    let leaves = [
        1,
        0b1_010_01_01,
        0b1_011_01_11,
        0b01_00_00_00,
        0b1_100_01_11,
        0b11_01_00_00,
        0b1_101_01_11,
        0b11_11_01_00,
        0b1_110_01_11,
        0b11_11_11_01,
        0b00_01_11_11,
        0b11_11_11_01,
    ];

    let expect = [
        Leaf {
            pos: Vec::from_slice(&[1, 1]).unwrap(),
            feature: true,
        },
        Leaf {
            pos: Vec::from_slice(&[1, 3, 1]).unwrap(),
            feature: true,
        },
        Leaf {
            pos: Vec::from_slice(&[1, 3, 3, 1]).unwrap(),
            feature: true,
        },
        Leaf {
            pos: Vec::from_slice(&[1, 3, 3, 3, 1]).unwrap(),
            feature: true,
        },
        Leaf {
            pos: Vec::from_slice(&[1, 3, 3, 3, 3, 1]).unwrap(),
            feature: true,
        },
        Leaf {
            pos: Vec::from_slice(&[1, 3, 3, 3, 3, 3, 1]).unwrap(),
            feature: true,
        },
    ];

    let parser = LeafParser::new(&leaves).unwrap();
    let iter = parser.into_iter().zip(expect);

    for (p, e) in iter {
        assert_eq!(p, e)
    }
}

#[test]
fn draw_full() {
    let leaf = Leaf {
        pos: Vec::from_slice(&[0]).unwrap(),
        feature: true,
    };
    let mut display = mock_display::MockDisplay::new();

    leaf.draw(&mut display).unwrap();

    let pattern = ["################################################################"; 64];
    display.assert_pattern(&pattern)
}

#[test]
fn draw_stairs() {
    const STAIR_PATTERN: [&str; 64] = [
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                                                ",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                                ################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "                ################################################",
        "        ########################################################",
        "        ########################################################",
        "        ########################################################",
        "        ########################################################",
        "    ############################################################",
        "    ############################################################",
        "  ##############################################################",
        " ###############################################################",
    ];

    let leaves = [
        Leaf {
            pos: Vec::from_slice(&[0, 3]).unwrap(),
            feature: true,
        },
        Leaf {
            pos: Vec::from_slice(&[0, 2, 3]).unwrap(),
            feature: true,
        },
        Leaf {
            pos: Vec::from_slice(&[0, 2, 2, 3]).unwrap(),
            feature: true,
        },
        Leaf {
            pos: Vec::from_slice(&[0, 2, 2, 2, 3]).unwrap(),
            feature: true,
        },
        Leaf {
            pos: Vec::from_slice(&[0, 2, 2, 2, 2, 3]).unwrap(),
            feature: true,
        },
        Leaf {
            pos: Vec::from_slice(&[0, 2, 2, 2, 2, 2, 3]).unwrap(),
            feature: true,
        },
    ];

    let mut display = mock_display::MockDisplay::new();

    for leaf in leaves {
        leaf.draw(&mut display).unwrap();
    }

    display.assert_pattern(&STAIR_PATTERN)
}

#[test]
fn parse_draw_full() {
    let leaf = [0];
    let mut display = mock_display::MockDisplay::new();

    LeafParser::new(&leaf).unwrap().draw(&mut display).unwrap();

    let pattern = ["################################################################"; 64];
    display.assert_pattern(&pattern)
}

#[test]
fn parse_draw_stairs() {
    let leaves = [
        1,
        0b1_010_00_11,
        0b1_011_00_10,
        0b11_00_00_00,
        0b1_100_00_10,
        0b10_11_00_00,
        0b1_101_00_10,
        0b10_10_11_00,
        0b1_110_00_10,
        0b10_10_10_11,
        0b01_00_10_10,
        0b10_10_10_11,
    ];
    let mut display = mock_display::MockDisplay::new();
    display.set_allow_overdraw(true);

    LeafParser::new(&leaves)
        .unwrap()
        .draw(&mut display)
        .unwrap();

    const STAIR_PATTERN: [&str; 64] = [
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................................................",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................................################################",
        "................################################################",
        "................################################################",
        "................################################################",
        "................################################################",
        "................################################################",
        "................################################################",
        "................################################################",
        "................################################################",
        "........########################################################",
        "........########################################################",
        "........########################################################",
        "........########################################################",
        "....############################################################",
        "....############################################################",
        "..##############################################################",
        ".###############################################################",
    ];

    display.assert_pattern(&STAIR_PATTERN)
}
